<?php
namespace GeorgRinger\GoogleSignin\UserProvider;

use GeorgRinger\GoogleSignin\Domain\Model\Dto\ExtensionConfiguration;
use GeorgRinger\GoogleSignin\Error\ConfigurationException;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;

class FrontendUserProvider extends AbstractUserProvider
{
    /**
     * Creates a new user based on a configured skeleton user.
     *
     * @param string $email
     * @param string $name
     * @return void
     * @throws ConfigurationException
     */
    public function copyUserFromSkeleton(string $email, string $name): void
    {
        $extensionConfiguration = GeneralUtility::makeInstance(ExtensionConfiguration::class);
        $skeletonUid = $extensionConfiguration->getFeAutomaticUserCreationTemplate();

        if ($skeletonUid <= 0) {
            throw new ConfigurationException('No fe user template configured.', 1528048440);
        }

        $skeletonUser = $this->getUserById($skeletonUid);

        if (empty($skeletonUser)) {
            throw new ConfigurationException('Invalid fe user template configured.', 1528048444);
        }

        $this->createUserFromSkeleton($skeletonUser, $email, $name);
    }

    /**
     * Check if the organisation from the google user that tries to login
     * matches one of the configured organisations.
     *
     * @param string|null $organisation
     * @return bool
     */
    public function isUserInApprovedOrganisation( $organisation): bool
    {
        if (empty($organisation)) {
            return true;
        }

        $extensionConfiguration = GeneralUtility::makeInstance(ExtensionConfiguration::class);

        return GeneralUtility::inList($extensionConfiguration->getFeAutomaticUserCreationForOrganization(), $organisation);
    }

    /**
     * Create a new user record based on a skeleton user.
     *
     * @param array $skeletonUser The existing skeleton user array
     * @param string $email
     * @param string $name
     * @param array $additionalData Additional data for a new user. This data gets merged with the seketon user data.
     */
    protected function createUserFromSkeleton(array $skeletonUser, string $email, string $name, array $additionalData = []): void
    {
        unset($skeletonUser['uid']);

        $currentTimestamp = (new \DateTime())->getTimestamp();
        $userData = array_merge(
            $skeletonUser,
            [
                'username' => $email,
                $this->emailFieldName => $email,
                'name' => $name,
                'password' => $this->generatePassword(),
                'tstamp' => $currentTimestamp,
                'crdate' => $currentTimestamp,
                'disable' => 0,
                'deleted' => 0,
                'description' => 'Auto generated by google_signin plugin'
            ],
            $additionalData
        );

        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);
        $queryBuilder
            ->insert($this->authenticationInformation['db_user']['table'])
            ->values($userData)
            ->execute();
    }
}
